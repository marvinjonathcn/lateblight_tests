}
else{
return(0);
}
}
else if(vt == "mr" | vt == "r" | vt == "hr") {
if(hhr == 18) {
return(0);
}
else if(in_range(hhr,19.0,24.0)) {
return(1);
}
else{
return(0)
}
}
else{
return(0)
}
}
else if(htavg < 2.5 & hhr == 24) {
return(0)
}
else {
return(0)
}
}
# function for calculate fungicide units
# INPUTS: rain mm, dsa - days since fungicide aplication
calc_fu <- function(rain,dsa) {
if(rain < 1 & rain > 0) {
return(1);
} else {
if(dsa == 1) {
if(in_range(rain,1.0,1.4)) {
return(4);
}
else if(in_range(rain,1.5,3.4)) {
return(5);
}
else if(in_range(rain,3.5,6.0)) {
return(6);
}
else if(rain > 6) {
return(7);
}
else{
return(0);
}
}
else if(dsa == 2) {
if(in_range(rain,1.0,1.4)) {
return(3);
}
else if(in_range(rain,1.5,4.4)) {
return(4);
}
else if(in_range(rain,4.5,8.0)) {
return(5);
}
else if(rain > 8) {
return(6);
}
else{
return(0);
}
}
else if(dsa == 3) {
if(in_range(rain,1.0,2.4)) {
return(3);
}
else if(in_range(rain,2.4,5.0)) {
return(4);
}
else if(rain > 5) {
return(5);
}
else{
return(0);
}
}
else if(in_range(dsa,4.0,5.0)) {
if(in_range(rain,1.0,2.4)) {
return(3);
}
else if(in_range(rain,2.5,8)) {
return(4);
}
else if(rain > 8) {
return(5);
}
else{
return(0);
}
}
else if(in_range(dsa,6.0,9.0)) {
if(in_range(rain,1.0,4.0)) {
return(3);
}
else if(rain > 4) {
return(4);
}
else{
return(0);
}
}
else if (in_range(dsa,10.0,14.0)) {
if(in_range(rain,1.0,1.4)) {
return(2);
}
else if(in_range(rain,1.5,8.0)) {
return(3);
}
else if(rain > 8) {
return(4);
}
else{
return(0);
}
}
else if (dsa > 14) {
if(in_range(rain,1.0,8.0)) {
return(2);
}
else if(rain > 8) {
return(3);
}
else{
return(0);
}
}
else {
return(0);
}
}
}
# function for decision rules
# INPUTS: abu, afu
check_bu_cutoff <- function(abu,vt) {
if(vt == "s" & abu >= 30) {
return(TRUE);
} else if(vt == "ms" & abu >= 35) {
return(TRUE);
} else if(vt == "mr" & abu >= 40) {
return(TRUE);
} else if(vt == "r" & abu >= 45) {
return(TRUE);
} else if(vt == "hr" & abu >= 50){
return(TRUE);
} else {
return(FALSE);
}
}
check_fu_cutoff <- function(afu,vt) {
if(vt == "s" & afu >= 15) {
return(TRUE);
} else if(vt == "ms" & afu >= 20) {
return(TRUE);
} else if(vt == "mr" & afu >= 25) {
return(TRUE);
} else if(vt == "r" & afu >= 30) {
return(TRUE);
} else if(vt == "hr" & afu >= 35){
return(TRUE);
} else {
return(FALSE);
}
}
# function for calculate humidity relative hourly
# INPUTS: meterological data, coordinates (lat y long)
calculate_hhr <- function(climdata, lon, lat) {
#########################
date_df <- as.Date(climdata[[1]], format = "%Y-%m-%d")
tn <- as.numeric(climdata[[4]])
tx <- as.numeric(climdata[[3]])
tavg <- (tn+tx)/2
hrn <- as.numeric(climdata[[8]])
hrx <- as.numeric(climdata[[7]])
hravg <- (hrn+hrx)/2
tdew <- tavg - ( (100 - hravg) / 5)
rain <- as.numeric(climdata[[5]])
# Calculate hourly for sunrise and sunset
crds <- matrix(c(lon[[1]], lat[[1]]), ncol = 2)
sunrise <- sunriset(crds, as.POSIXct(date_df),
proj4string=CRS("+proj=longlat +datum=WGS84"),
direction=c("sunrise"), POSIXct.out= F)
sunset <- sunriset(crds, as.POSIXct(date_df),
proj4string=CRS("+proj=longlat +datum=WGS84"),
direction=c("sunset"), POSIXct.out= F)
df_format_hhr <- data.frame(date_df[-c(length(date_df),1)], tn[-c(length(tn),1)], tn[-c(1:2)],
tx[-c(length(tx),1)], tx[-c(length(tx), length(tx) - 1)],
tdew[-c(length(tdew),1)],
sunrise[-c(length(sunrise),1)], sunset[-c(length(sunset),1)],
sunset[-c(length(sunset),length(sunset) - 1)])
names(df_format_hhr) <- c("date", "tmin", "tminnext",
"tmax", "tmaxold", "tdew",
"sunrise", "sunset", "sunset old")
#########################
# Tn temp min, Tx temp max, To sunset , Tp temp min next
# Hn sunrise, Hx h temp max, Ho h sunset , Hp h temp min next
# date <- df_in_hhr[[1]]
#####
model_temp_hr <- function(df_in_hhr){
Tn <- as.numeric(df_in_hhr[[2]])
Tp <- as.numeric(df_in_hhr[[3]])
Tx <- as.numeric(df_in_hhr[[4]])
Hn <- as.numeric(df_in_hhr[[7]]) * 24
Ho <- as.numeric(df_in_hhr[[8]]) * 24
tdew <- as.numeric(df_in_hhr[[6]])
#####
Tp_old <- Tn
Hp_old <- Hn + 24
Tx_old <- as.numeric(df_in_hhr[[5]])
Ho_old <- as.numeric(df_in_hhr[[9]]) * 24
To_old <- Tx_old - 0.39*(Tx_old - Tp_old)
# Parameters for model
To <- Tx - 0.39*(Tx - Tp)
Hp <- Hn + 24
Hx <- Ho - 4
alpha <- Tx - Tn
r <- Tx - To
beta1 <- (Tp - To) / sqrt(Hp - Ho)
beta2 <- (Tp_old - To_old) / sqrt(Hp_old - Ho_old)
t <- 1:24
T_model <- 0
for(i in 1:24) {
if(t[i] > Hn & t[i] <= Hx){
T_model[i] <- Tn + alpha * ( ((t[i]-Hn) / (Hx-Hn)) * (pi/2) )
}
else if(t[i] > Hx & t[i] <= Ho){
T_model[i] <- To + r * sin( (pi/2) + ( ((t[i]-Hx)/4) * (pi/2) ) )
}
else if( t[i] > Ho & t[i] <= 24 ){
T_model[i] <- To + beta1 * sqrt( (t[i] - Ho) )
}
else if (t[i] >= 1 & t[i] <= Hn){
T_model[i] <- To_old + beta2 * sqrt( (t[i]+24) - Ho_old)
}
else {
T_model[i] <- "Error"
}
}
# Buck formula for es and e (kPa)
es <- 0.61121 * exp( ( (18.678 - (T_model/234.5)) * T_model) / (257.14 + T_model))
e <- 0.61121 * exp( ( (18.678 - (tdew/234.5)) * tdew) / (257.14 + tdew))
# hr limit > 90
hr <- (e/es) * 100
hours_hr_limit <- length(hr[hr>90])
return(hours_hr_limit)
}
df_hrlim_hours <- apply(df_format_hhr, 1 , function(x) model_temp_hr(x))
df_output_hr <- data.frame(date_df[-c(length(date_df),1)], df_hrlim_hours,
tavg[-c(length(tavg),1)], rain[-c(length(rain),1)])
names(df_output_hr) <- c("date", "hr90_hour", "tavg_C", "rain_mm")
return(df_output_hr)
}
# function for SIMCAST model Fry et. al 1983
simcast_model <- function(df_in_simcast, vt){
vt <- as.character(vt[[1]])
lines <- list()
for(i in 1:nrow(df_in_simcast)){
lines[[i]] = df_in_simcast[i,]
}
#########
firstApplication <- TRUE
returnValue <- 1
bu <- 0
fu <- 0
bua <- 0
fua <- 0
afu <- 0
app <- 0
i <- 0
last_bua <- 0
last_fua <- 0
app_ctr <- 0
days_since_app <- 0
min_day <- 5
abu <- 0
tabu <- 0
tafu <- 0
#begin <- 0
end <- length(lines)
###############
bu_final <- 0
fu_final <- 0
bua_final <- 0
fua_final <- 0
abu_final <- 0
afu_final <- 0
app_final <- 0
for (k in 1:end){
line <- lines[[k]]
day <- line[[1]]
hhr <- as.numeric(line[[2]])
htavg <- as.numeric(line[[3]])
rain <- as.numeric(line[[4]])
bu <- calc_bu(hhr, htavg, vt)
last_bua <- bua
bua <- bu + bua
if(abu != 1 && afu != 1 && days_since_app <= 0){
days_since_app <- 0
} else {
days_since_app <- days_since_app + 1
fu = calc_fu(rain, days_since_app)
last_fua = fu
fua = fu + fua
}
if(days_since_app > min_day || firstApplication){
if( check_bu_cutoff(bua, vt) ) {
bua <- 0
fua <- 0
}
if( check_fu_cutoff(fua, vt) ) {
bua <- 0
fua <- 0
}
}
if (bua >= last_bua || days_since_app <= min_day && !firstApplication) {
app <- FALSE
abu <- 0
} else {
abu <- 1
app <- TRUE
app_ctr <- app_ctr + 1
days_since_app <- 0
firstApplication <- FALSE
}
if (fua < last_fua && days_since_app > min_day) {
afu <- 1
app <- TRUE
app_ctr <- app_ctr + 1
days_since_app <- 0
} else {
app <- FALSE
afu <- 0
}
tabu <- abu + tabu
tafu <- afu + tafu
bu_final[k] <- bu
fu_final[k] <- fu
bua_final[k] <- bua
fua_final[k] <- fua
abu_final[k] <- abu
afu_final[k] <- afu
app_final[k] <- app_ctr
}
output_simcast <- data.frame(bu_final, fu_final, bua_final, fua_final,
abu_final, afu_final, app_final)
names(output_simcast) <- c("BU", "FU", "BUA", "FUA", "ABU", "AFU", "APP")
output_scmodel <- cbind(df_in_simcast, output_simcast)
print("Running simcast model ... Loading")
return(output_scmodel)
}
library(svglite)
library(lattice)
library(ggplot2)
library(slickR)
s.in=sapply(
list(
xmlSVG({plot(1:10)},standalone=TRUE)
,xmlSVG({print(xyplot(x~x,data.frame(x=1:10),type="l"))},standalone=TRUE)
,xmlSVG({show(ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,colour=Species))+geom_point())},standalone=TRUE)
,xmlSVG({
print(
dotplot(variety ~ yield | site , data = barley, groups = year,
key = simpleKey(levels(barley$year), space = "right"),
xlab = "Barley Yield (bushels/acre) ",
aspect=0.5, layout = c(1,6), ylab=NULL)
)
},standalone=TRUE
)
)
,function(sv){
paste0(
"data:image/svg+xml;utf8,"
,as.character(sv)
)
}
)
slickR(s.in,slideId = 'baseDiv',slideIdx = list(1:3))
slickR(s.in,slideId = c('up','down'),
slideIdx = list(1:3,1:3),
synchSlides = c('up','down'),
slideType = rep('img',3),
slickOpts = list(list(slidesToShow=1,slidesToScroll=1),
list(dots=T,slidesToScroll=1,slidesToShow=3,
centerMode=T,focusOnSelect=T)
)
)
library(svglite)
library(lattice)
library(ggplot2)
library(slickR)
install.packages("svglite")
s.in=sapply(
list(
xmlSVG({plot(1:10)},standalone=TRUE)
,xmlSVG({print(xyplot(x~x,data.frame(x=1:10),type="l"))},standalone=TRUE)
,xmlSVG({show(ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,colour=Species))+geom_point())},standalone=TRUE)
,xmlSVG({
print(
dotplot(variety ~ yield | site , data = barley, groups = year,
key = simpleKey(levels(barley$year), space = "right"),
xlab = "Barley Yield (bushels/acre) ",
aspect=0.5, layout = c(1,6), ylab=NULL)
)
},standalone=TRUE
)
)
,function(sv){
paste0(
"data:image/svg+xml;utf8,"
,as.character(sv)
)
}
)
library(svglite)
library(lattice)
library(ggplot2)
library(slickR)
s.in=sapply(
list(
xmlSVG({plot(1:10)},standalone=TRUE)
,xmlSVG({print(xyplot(x~x,data.frame(x=1:10),type="l"))},standalone=TRUE)
,xmlSVG({show(ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,colour=Species))+geom_point())},standalone=TRUE)
,xmlSVG({
print(
dotplot(variety ~ yield | site , data = barley, groups = year,
key = simpleKey(levels(barley$year), space = "right"),
xlab = "Barley Yield (bushels/acre) ",
aspect=0.5, layout = c(1,6), ylab=NULL)
)
},standalone=TRUE
)
)
,function(sv){
paste0(
"data:image/svg+xml;utf8,"
,as.character(sv)
)
}
)
s.in
slickR(s.in,slideId = 'baseDiv',slideIdx = list(1:3))
slickR(s.in,slideId = c('up','down'),
slideIdx = list(1:3,1:3),
synchSlides = c('up','down'),
slideType = rep('img',3),
slickOpts = list(list(slidesToShow=1,slidesToScroll=1),
list(dots=T,slidesToScroll=1,slidesToShow=3,
centerMode=T,focusOnSelect=T)
)
)
slickR(s.in,slideId = 'baseDiv')
slickR(s.in,slideId = c('up','down'),
synchSlides = c('up','down'),
slideType = rep('img',3),
slickOpts = list(list(slidesToShow=1,slidesToScroll=1),
list(dots=T,slidesToScroll=1,slidesToShow=3,
centerMode=T,focusOnSelect=T)
)
)
slickR(s.in,slideId = 'baseDiv')
setwd()
GETWD()
getwf()
getwd()
xmlSVG({plot(1:10)},standalone=TRUE)
plot(1:10)
plot(1:10)
plot(1:10)
slickR(s.in,slideId = 'baseDiv')
xmlSVG({plot(1:10)},standalone=TRUE)
shiny::runApp('R/lateblight_tests/shiny-app-simple')
function(session, output_width_name){
function() {
session$clientData[[output_width_name]]
}
}
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
shiny::runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
shiny::runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
shiny::runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
runApp('R/lateblight_tests/shiny-app-simple')
